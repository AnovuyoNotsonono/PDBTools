{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77a517af-64de-4343-bd1c-c3e688a62d3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "pdbtools.py\n",
    "\n",
    "A Python toolkit for downloading, querying, and analyzing PDB files.\n",
    "Includes functions for:\n",
    "- Downloading PDB files\n",
    "- Extracting metadata\n",
    "- Retrieving protein residues and chains\n",
    "- Modifying chain IDs\n",
    "- Identifying non-standard residues\n",
    "- Plotting temperature factors\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import requests\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# -----------------------------\n",
    "# Core Function: Get PDB file\n",
    "# -----------------------------\n",
    "def get_pdb(pdb_id=None):\n",
    "    \"\"\"\n",
    "    Download or read a PDB file and return its content as a list of lines.\n",
    "    \n",
    "    Parameters:\n",
    "        pdb_id (str): The PDB ID of the structure.\n",
    "                       If None, prints available options.\n",
    "    \n",
    "    Returns:\n",
    "        list[str]: Lines of the PDB file.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        if pdb_id is None:\n",
    "            print(\"Available functions:\\n\"\n",
    "                  \"1. get_pdb()\\n\"\n",
    "                  \"2. pdb_details()\\n\"\n",
    "                  \"3. protein_residues()\\n\"\n",
    "                  \"4. pdb_chains()\\n\"\n",
    "                  \"5. print_or_write_file()\\n\"\n",
    "                  \"6. change_chain_id()\\n\"\n",
    "                  \"7. non_standard_residues()\\n\"\n",
    "                  \"8. temperature_factor_plot()\")\n",
    "            return\n",
    "        \n",
    "        filename = f\"{pdb_id}.pdb\"\n",
    "        if not os.path.exists(filename):\n",
    "            print(f\"{filename} not found locally. Downloading...\")\n",
    "            response = requests.get(f\"https://files.rcsb.org/download/{pdb_id}.pdb\")\n",
    "            pdb_lines = response.text.splitlines()\n",
    "            with open(filename, \"w\") as f:\n",
    "                f.write(\"\\n\".join(pdb_lines))\n",
    "            return pdb_lines\n",
    "        else:\n",
    "            print(f\"{filename} exists locally. Reading...\")\n",
    "            with open(filename, \"r\") as f:\n",
    "                return f.readlines()\n",
    "    except Exception as e:\n",
    "        print(f\"Error in get_pdb: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Metadata Extraction\n",
    "# -----------------------------\n",
    "def pdb_details(pdb_id, key):\n",
    "    \"\"\"\n",
    "    Print specific metadata lines from a PDB file.\n",
    "    \n",
    "    Parameters:\n",
    "        pdb_id (str): PDB ID\n",
    "        key (str): Metadata key (1-7)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        keys = {\n",
    "            \"1\": \"HEADER\",\n",
    "            \"2\": \"TITLE\",\n",
    "            \"3\": \"SOURCE\",\n",
    "            \"4\": \"KEYWDS\",\n",
    "            \"5\": \"AUTHOR\",\n",
    "            \"6\": \"RESOLUTION\",\n",
    "            \"7\": \"JRNL\"\n",
    "        }\n",
    "        target = keys.get(key)\n",
    "        if not target:\n",
    "            print(\"Invalid key. Choose 1-7.\")\n",
    "            return\n",
    "        for line in pdb_lines:\n",
    "            if line.startswith(target):\n",
    "                print(line.strip())\n",
    "    except Exception as e:\n",
    "        print(f\"Error in pdb_details: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Protein Residues\n",
    "# -----------------------------\n",
    "def protein_residues(pdb_id, chain_id):\n",
    "    \"\"\"\n",
    "    Print one-letter amino acid sequence for a specific chain.\n",
    "    \n",
    "    Parameters:\n",
    "        pdb_id (str): PDB ID\n",
    "        chain_id (str): Chain identifier\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        three_letter_seq = \"\"\n",
    "        for line in pdb_lines:\n",
    "            if line.startswith(\"ATOM\") and line[21] == chain_id and line[13:15] == \"CA\":\n",
    "                three_letter_seq += line[17:20].strip()\n",
    "\n",
    "        aa_map = {\n",
    "            \"ALA\":\"A\",\"ARG\":\"R\",\"ASN\":\"N\",\"ASP\":\"D\",\"CYS\":\"C\",\"GLU\":\"E\",\n",
    "            \"GLN\":\"Q\",\"GLY\":\"G\",\"HIS\":\"H\",\"ILE\":\"I\",\"LEU\":\"L\",\"LYS\":\"K\",\n",
    "            \"MET\":\"M\",\"PHE\":\"F\",\"PRO\":\"P\",\"SER\":\"S\",\"THR\":\"T\",\"TRP\":\"W\",\n",
    "            \"TYR\":\"Y\",\"VAL\":\"V\",\"ASX\":\"B\",\"GLX\":\"Z\",\"SEC\":\"U*\"\n",
    "        }\n",
    "        seq = [aa_map.get(res, \"X\") for res in [three_letter_seq[i:i+3] \n",
    "                                                for i in range(0, len(three_letter_seq), 3)]]\n",
    "        print(\"\".join(seq))\n",
    "    except Exception as e:\n",
    "        print(f\"Error in protein_residues: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Extract Chains\n",
    "# -----------------------------\n",
    "def pdb_chains(pdb_id, output_filename, chain=None):\n",
    "    \"\"\"\n",
    "    Save sequences of chains from a PDB file into a FASTA file.\n",
    "    \n",
    "    Parameters:\n",
    "        pdb_id (str): PDB ID\n",
    "        output_filename (str): Output FASTA filename\n",
    "        chain (str): Optional chain to extract (default None for all)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        sequences = \"\"\n",
    "        chain_ids = \"\"\n",
    "        header = pdb_lines[0].strip()\n",
    "        for line in pdb_lines:\n",
    "            if line.startswith(\"SEQRES\") and chain is None:\n",
    "                sequences += line[19:70].strip()\n",
    "                chain_ids += line[11].strip()\n",
    "        with open(f\"{output_filename}.fasta\", \"w\") as f:\n",
    "            f.write(f\">{header}_{chain_ids}\\n{sequences}\\n\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error in pdb_chains: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Print or write lines\n",
    "# -----------------------------\n",
    "def print_or_write_file(pdb_id, chain_id, record_type=\"ATOM\", option=\"print\"):\n",
    "    \"\"\"\n",
    "    Print or write ATOM/HETATM lines for a chain.\n",
    "    \n",
    "    Parameters:\n",
    "        pdb_id (str)\n",
    "        chain_id (str)\n",
    "        record_type (str): \"ATOM\" or \"HETATM\"\n",
    "        option (str): \"print\" or \"write\"\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        results = [line for line in pdb_lines if line.startswith(record_type) and line[21] == chain_id]\n",
    "        if option == \"print\":\n",
    "            for line in results:\n",
    "                print(line.strip())\n",
    "        elif option == \"write\":\n",
    "            with open(\"Proteins_or_nonproteins.fasta\", \"w\") as f:\n",
    "                f.writelines(results)\n",
    "        else:\n",
    "            print(\"Option must be 'print' or 'write'.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error in print_or_write_file: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Change Chain ID\n",
    "# -----------------------------\n",
    "def change_chain_id(pdb_id, record_type, old_chain_id, new_chain_id, output_filename=\"altered_chain.fasta\"):\n",
    "    \"\"\"\n",
    "    Replace a chain ID in a PDB file and save to new file.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        new_file = []\n",
    "        for line in pdb_lines:\n",
    "            if line.startswith(record_type) and line[21] == old_chain_id:\n",
    "                line = line[:21] + new_chain_id + line[22:]\n",
    "            new_file.append(line)\n",
    "        with open(output_filename, \"w\") as f:\n",
    "            f.writelines(new_file)\n",
    "    except Exception as e:\n",
    "        print(f\"Error in change_chain_id: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Non-standard residues\n",
    "# -----------------------------\n",
    "def non_standard_residues(pdb_id):\n",
    "    \"\"\"\n",
    "    Print non-standard residues (from HETATM records) in a PDB file.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        residues = {line[17:20].strip() for line in pdb_lines if line.startswith(\"HETATM\")}\n",
    "        print(residues)\n",
    "    except Exception as e:\n",
    "        print(f\"Error in non_standard_residues: {e}\")\n",
    "\n",
    "\n",
    "# -----------------------------\n",
    "# Temperature Factor Plot\n",
    "# -----------------------------\n",
    "def temperature_factor_plot(pdb_id, chain_id, L=10, B=5):\n",
    "    \"\"\"\n",
    "    Plot B-factors (temperature factors) for a given chain.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        pdb_lines = get_pdb(pdb_id)\n",
    "        b_factors = [float(line[60:66]) for line in pdb_lines if line.startswith(\"ATOM\") and line[21] == chain_id]\n",
    "        plt.figure(figsize=(L, B))\n",
    "        plt.plot(b_factors)\n",
    "        plt.title(f\"Temperature Factors for {pdb_id} Chain {chain_id}\")\n",
    "        plt.xlabel(\"Residue Index\")\n",
    "        plt.ylabel(\"B-factor\")\n",
    "        plt.show()\n",
    "    except Exception as e:\n",
    "        print(f\"Error in temperature_factor_plot: {e}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
